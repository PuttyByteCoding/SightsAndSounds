// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SightsAndSounds.WebAPI.Migrations
{
    [DbContext(typeof(SightsAndSoundsDbContext))]
    partial class SightsAndSoundsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Concert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordingType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AlternateNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LiveDebut")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Playcount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConcertId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Guests")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMissing")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("SongId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AlternateNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Concert", b =>
                {
                    b.HasOne("SightsAndSounds.Shared.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Track", b =>
                {
                    b.HasOne("SightsAndSounds.Shared.Models.Concert", null)
                        .WithMany("Setlist")
                        .HasForeignKey("ConcertId");

                    b.HasOne("SightsAndSounds.Shared.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("SightsAndSounds.Shared.Models.Concert", b =>
                {
                    b.Navigation("Setlist");
                });
#pragma warning restore 612, 618
        }
    }
}
